const stripe = require('stripe')('sk_test_51PIUwIP1jRGQyMPGjV1eabWoEV50AcPDqY6vWUQh0I18zMjMaaJC8q2AJ5RApYeeNvawp20ukQkflGRwB4qB88st00tObSSLDc');
const User = require('../models/User');

let pricingIds = ['price_1PIcjiP1jRGQyMPG1shY69it'];

// const createCheckoutSession = async(req, res) => {
//     // const { priceId, userId } = req.body;
//     try {

//         const session = await stripe.checkout.sessions.create({
//             payment_method_types: ['card'],
//             line_items: [
//               {
//                 price: pricingIds,
//                 quantity: 1,
//               },
//             ],
//             mode: 'payment',
//             success_url: `http://localhost:6099/success?session_id={CHECKOUT_SESSION_ID}`,
//             cancel_url: `http://localhost:6099/canceled`,
//             metadata: {
//               userId: 36, // Include user ID in metadata
//             },
//           });
      
//         //   res.json({ url: session.url });
        
//         res.redirect(303, session.url);

//     } catch(err) {
//         console.error('Error creating checkout session:', error);
//         res.status(500).json({ error: 'Internal Server Error' });
//     }
// }

// const createCheckoutSession = async(req, res) => {
//     const session = await stripe.checkout.sessions.create({
//         line_items: [
//           {
//             // Provide the exact Price ID (for example, pr_1234) of the product you want to sell
//             price: 'price_1PIcjiP1jRGQyMPG1shY69it',
//             quantity: 1,
//           },
//         ],
//         mode: 'payment',
//         success_url: `http://localhost:6099/?success=true`,
//         cancel_url: `http://localhost:6099/?canceled=true`,
//       });
    
//      return res.json({ url: session.url });
// }

// const handleWebhook = async (req, res) => {
//     const sig = req.headers['stripe-signature'];
//     const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

//     let event;

//     try {
//         event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);
//       } catch (err) {
//         console.error('Webhook signature verification failed:', err.message);
//         return res.status(400).send(`Webhook Error: ${err.message}`);
//     }

//     if (event.type === 'checkout.session.completed') {
//         const session = event.data.object;
    
//         // Retrieve the user ID from the metadata
//         const userId = session.metadata.userId;
    
//         try {
//           const user = await User.findById(userId); // Find user by ID
    
//           if (user) {
//             user.hasAccess = true;
//             await user.save();
//             console.log(`User ${user.email} has been granted access.`);
//           } else {
//             console.error(`User not found for ID: ${userId}`);
//           }
//         } catch (error) {
//           console.error('Error updating user access:', error);
//         }
//       }
    
//       res.status(200).json({ received: true });
    
// }

// i have implemented the authentication but can you implement the payment gateway for me
// i have setup the stripe dashboard, i need to have 2 plans with plan pay once and have access forever
// but i need to know when which user pays in the link generated by stripe and update the user hasAccess to true

// can u write the code to arriwe previous features please

const createCheckoutSession = async (req, res) => {
    const { userId } = req.body;

    try {
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [
                {
                    price: pricingIds[0], // Assuming you want to use the first pricing ID in the array
                    quantity: 1,
                },
            ],
            mode: 'payment',
            success_url: `http://localhost:6099/success?session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `http://localhost:6099/canceled`,
            metadata: {
                userId: userId, // Include user ID in metadata
            },
        });

        res.redirect(303, session.url);
    } catch (err) {
        console.error('Error creating checkout session:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

const handleWebhook = async (req, res) => {
    const sig = req.headers['stripe-signature'];
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    let event;

    try {
        event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);
    } catch (err) {
        console.error('Webhook signature verification failed:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    if (event.type === 'checkout.session.completed') {
        const session = event.data.object;

        // Retrieve the user ID from the metadata
        const userId = session.metadata.userId;

        try {
            const user = await User.findById(userId); // Find user by ID

            if (user) {
                user.hasAccess = true;
                await user.save();
                console.log(`User ${user.email} has been granted access.`);
            } else {
                console.error(`User not found for ID: ${userId}`);
            }
        } catch (error) {
            console.error('Error updating user access:', error);
        }
    }

    res.status(200).json({ received: true });
};



module.exports = {
    createCheckoutSession,
    handleWebhook,
};

/*
const createCheckoutSession = async (req, res) => {
    const { userId } = req.body;
    try {
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [
                {
                    price: pricingIds[0], // Assuming you want to use the first pricing ID in the array
                    quantity: 1,
                },
            ],
            mode: 'payment',
            success_url: `http://localhost:6099/success?session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `http://localhost:6099/canceled`,
            metadata: {
                userId: userId, // Include user ID in metadata
            },
        });

        res.json({ url: session.url });
    } catch (err) {
        console.error('Error creating checkout session:', err);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

const handleWebhook = async (req, res) => {
    const sig = req.headers['stripe-signature'];
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    let event;

    try {
        event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);
    } catch (err) {
        console.error('Webhook signature verification failed:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    if (event.type === 'checkout.session.completed') {
        const session = event.data.object;

        // Retrieve the user ID from the metadata
        const userId = session.metadata.userId;

        try {
            const user = await User.findById(userId); // Find user by ID

            if (user) {
                user.hasAccess = true;
                await user.save();
                console.log(`User ${user.email} has been granted access.`);
            } else {
                console.error(`User not found for ID: ${userId}`);
            }
        } catch (error) {
            console.error('Error updating user access:', error);
        }
    }

    res.status(200).json({ received: true });
};


*/